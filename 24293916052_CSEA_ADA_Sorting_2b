#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// Function to swap two elements
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

// Partition function for Quick Sort
int partition(int arr[], int low, int high) {
    int pivot = arr[high]; // choose last element as pivot
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++) {
        if (arr[j] <= pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

// Quick Sort function
void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

int main() {
    int n;
    clock_t start, end;
    double time_taken;

    FILE *fp = fopen("quick_sort_time.csv", "w");
    if (fp == NULL) {
        printf("Error creating file!\n");
        return 1;
    }

    fprintf(fp, "n,Time(seconds)\n");

    printf("Quick Sort Time Analysis\n");

    // Test for different input sizes
    for (n = 1000; n <= 100000; n += 5000) {
        int *arr = (int *)malloc(n * sizeof(int));
        if (arr == NULL) {
            printf("Memory allocation failed!\n");
            return 1;
        }

        // Generate random numbers
        for (int i = 0; i < n; i++)
            arr[i] = rand() % 100000;

        // Measure sorting time
        start = clock();
        quickSort(arr, 0, n - 1);
        end = clock();

        time_taken = ((double)(end - start)) / CLOCKS_PER_SEC;
        fprintf(fp, "%d,%.10f\n", n, time_taken);

        free(arr);
    }

    fclose(fp);

    printf("Data saved to 'quick_sort_time.csv'.\n");
    printf("Use Excel or Python to plot graph of Time vs n.\n");

    return 0;
}
